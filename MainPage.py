#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 15 18:11:20 2023

@author: saravananveeramani
"""

from pathlib import Path

import appdirs as ad

CACHE_DIR = ".cache"

# Force appdirs to say that the cache dir is .cache
ad.user_cache_dir = lambda *args: CACHE_DIR

# Create the cache dir if it doesn't exist
Path(CACHE_DIR).mkdir(exist_ok=True)

import yfinance as yf

import streamlit as st
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import pandas as pd
import math


# Functions Starts
NET_PROFIT_MARGIN = "Net profit margin is the percentage of revenue that remains as profit after expenses. It measures a company's profitability.Example: ABC Corporation had revenue of $1,000,000 and incurred $800,000 in expenses, resulting in a net profit of $200,000. The net profit margin is (Net Profit / Revenue) * 100 = ($200,000 / $1,000,000) * 100 = 20%."
DIVIDEND_DESC = "Dividends are a portion of a company's profits that it distributes to its shareholders. They are typically paid out regularly, usually on a quarterly basis, and are a way for investors to receive a share of the company's earnings as cash payments"
EPS_DESC = "EPS measures how much profit each share of the company's stock represents.Example: ABC Corporation earned a net profit of $200,000, and it has 100,000 outstanding shares of common stock. EPS = Net Profit / Number of Shares = $200,000 / 100,000 shares = $2 per share."
CASH_FLOW = "Cash flow is the movement of money into and out of a company, indicating its ability to meet financial obligations.Example: ABC Corporation had positive cash flow of $50,000 during the quarter, indicating that it generated more cash than it spent."
CHANGE_IN_CASH = "Change in cash reflects the difference in a company's cash balance over a specific period.Example: ABC Corporation had a change in cash of +$10,000 for the year, indicating an increase in its cash reserves."
REVENUE_ = "Revenue is the total income generated by the company from its business activities. Example: ABC Corporation's revenue for the year was $1,000,000, which includes sales from its products and services."
NET_INCOME_ = "Net income is the company's profit after all expenses, including taxes. Example: ABC Corporation's net income for the year was $200,000, calculated after subtracting all expenses and taxes from its revenue."
OPERATING_EXP = "Operating expenses are the costs incurred to run the day-to-day operations of the business. Example: ABC Corporation's operating expenses include salaries, rent, utilities, and other costs necessary to operate the company."
GROSS_PROFIT = " Gross profit is the profit remaining after deducting the cost of goods sold (COGS) from revenue. Example: ABC Corporation had revenue of $1,000,000 and COGS of $400,000, resulting in a gross profit of $600,000."
ASSET_ = "Assets are everything a company owns with monetary value, including cash, buildings, equipment, and investments.Example: ABC Corporation's assets include $500,000 in cash, a building valued at $1,000,000, and machinery valued at $300,000."
LIABILITY_ = "Liabilities are debts or obligations a company owes, including loans, accounts payable, and accrued expenses. Example: ABC Corporation has liabilities of $400,000, which include a bank loan of $200,000 and accounts payable of $200,000."
CASHFLOW_DESC = """
:blue[Operating Cash Flow (OCF):] \n
Positive OCF: A positive operating cash flow indicates that a company is generating more cash from its core operations than it is spending. This is generally a positive sign of financial health. It allows the company to reinvest in its business, fund day-to-day operations, and potentially expand. It supports growth by providing the necessary working capital to meet current obligations and invest in new opportunities.\n
Negative OCF: A negative operating cash flow suggests that the company's core operations are not generating sufficient cash to cover its expenses. This could be due to a variety of factors, such as declining sales or inefficiencies in operations. To sustain or achieve growth, the company may need to address these issues and improve its operational efficiency.\n
:blue[Investing Cash Flow (ICF):] \n
Positive ICF: When a company has a positive investing cash flow, it typically means that it is making investments in assets such as property, plant, equipment, or acquisitions. These investments can be essential for long-term growth. They can lead to increased production capacity, improved technology, or expansion into new markets, all of which can contribute to future revenue growth.\n
Negative ICF: A negative investing cash flow may indicate that the company is divesting assets or selling off investments. While this can provide short-term cash, it might hinder long-term growth prospects if the company is not reinvesting in ways that will drive future revenue.\n
:blue[Financing Cash Flow (FCF):]\n
Positive FCF: A positive financing cash flow often comes from sources like issuing debt, selling equity, or obtaining loans. While these actions can provide funds for growth initiatives, they also come with financial obligations (interest payments, dividends, etc.). Careful management of financing activities is necessary to ensure that the cost of capital doesn't outweigh the returns from growth investments.\n
Negative FCF: A negative financing cash flow may result from activities like repaying debt or buying back stock. These actions can reduce financial leverage but may limit the funds available for growth. However, they can also be part of a financial strategy to optimize capital structure. """
REPURCHASE_DESC = "A company buys back its own shares of stock using its available cash. This action can indicate that the company believes its stock is undervalued or wants to reduce the number of outstanding shares, potentially increasing the ownership stake of existing shareholders."
def millify(n):
    millnames = ['',' Thousand',' M',' B',' T']
    n = float(n)
    millidx = max(0,min(len(millnames)-1,
                        int(math.floor(0 if n == 0 else math.log10(abs(n))/3))))

    return '{:.0f}{}'.format(n / 10**(3 * millidx), millnames[millidx])

# Get dividends data
def getDividends(ticker):
    tkr = yf.Ticker(ticker)
    div_data = tkr.dividends
    return div_data.tail(40)


# Get stock data
def getTicker(ticker):
    tkr = yf.Ticker(ticker)
    return tkr

def getStockName(ticker):
    tkr = yf.Ticker(ticker)
    return tkr.info['longName']

# format income statement parameter dataframe.
def formatIncomeStmtData(df):
    result_df = df.T
    result_df['year'] = result_df.index
    return result_df

# Functions End


st.set_page_config(page_title="Fundamental Analysis App", layout="wide")


with st.form("my_form"):
   col1, col2 = st.columns([3,1])

   with col1:
       ticker = st.text_input("Enter a stock name", key="ticker",value="AAPL")
   with col2:
       st.write("")
       st.write("")
       submitted = st.form_submit_button("Go")




st.header("{}".format(getStockName(ticker)))

with st.container():
    col1, col2, col3 = st.columns(3)
    df = getTicker(ticker)
    with col1:
        st.metric(label="P/E Ratio", value='{:.0f}'.format(df.info["forwardPE"]))
    with col2:
        dy= "N/A"
        if "dividendYield" in df.info :
            dy = '{:.2f}'.format(df.info["dividendYield"] * 100)
        st.metric(label="Dividend Yield", value=dy)
    with col3:
        st.metric(label="Market Cap", value=millify(df.info["marketCap"]))


tab1, tab2, tab3,tab4 = st.tabs(["Key Data","Income Statement", "Balance Sheet", "Cash Flow"])
with tab1:

    row1_space1, row1_1, row1_space2, row1_2, row1_space3 = st.columns(
            (0.1, 1, 0.1, 1, 0.1)
        )


    with row1_1:
        st.subheader("Profit Margins",help=NET_PROFIT_MARGIN)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)
        result_df['NPM'] = (result_df['Net Income'] / result_df['Total Revenue']) * 100
        fig = px.bar(
                    result_df,
                    x="year",
                    y="NPM",
                    title="Net Profit Margins",
                    text_auto=True,
                    color_discrete_sequence=["#81c1eb"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)


    with row1_2:
        st.subheader("EPS ",help=EPS_DESC)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Basic EPS",
                    title="EPS by Year",
                    text_auto=True,
                    color_discrete_sequence=["#c681eb"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    row1_space2, row2_1, row2_space2, row2_2, row2_space3 = st.columns(
            (0.1, 1, 0.1, 1, 0.1)
        )
    with row2_1:
        st.subheader("Dividends ")



with tab2:

    # Row #1
    row3_space1, row3_1, row3_space2, row3_2, row3_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

    with row3_1:
        st.subheader("Revenue",help=REVENUE_)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Total Revenue",
                    title="Revenue over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#81c1eb"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)


    with row3_2:

        st.subheader("Net Income",help=NET_INCOME_)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Net Income",
                    title="Net Income over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#e6859c"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)


    # Row # 2


    row4_space1, row4_1, row4_space2, row4_2, row4_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )


    with row4_1:
        st.subheader("Operating Expense",help=OPERATING_EXP)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Operating Expense",
                    title="Operating Expense by Year",
                    text_auto=True,
                    color_discrete_sequence=["#e66e65"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    with row4_2:
        st.subheader("EPS ",help=EPS_DESC)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Basic EPS",
                    title="EPS by Year",
                    text_auto=True,
                    color_discrete_sequence=["#c681eb"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)


    # Row # 2


    row5_space1, row5_1, row5_space2, row5_2, row5_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

    with row5_1:
        st.subheader("Gross Profit ",help=GROSS_PROFIT)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.income_stmt)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Gross Profit",
                    title="Profit by Year",
                    text_auto=True,
                    color_discrete_sequence=["#c681eb"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)


    with st.expander("Reference Data"):
        df=getTicker(st.session_state.ticker ).incomestmt
        st.dataframe(df.style.highlight_max(axis=1),use_container_width=True)

with tab3:
    # Row #1
    row3_space1, row3_1, row3_space2, row3_2, row3_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

    with row3_1:
        st.subheader("Assets",help=ASSET_)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.balancesheet)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Total Assets",
                    title="Total Assets over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#1aab6c"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    with row3_2:
        st.subheader("Liabilities",help=LIABILITY_)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.balancesheet)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Total Liabilities Net Minority Interest",
                    title="Total Liabilities over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#db831f"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    # Row #2
    row4_space1, row4_1, row4_space2, row4_2, row4_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

    with row4_1:
        st.subheader("Liabilities Vs Equity ")
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.balancesheet)

        fig = go.Figure(data=[
            go.Bar(name='Liabilities', x=result_df['year'], y=result_df["Total Liabilities Net Minority Interest"]),
            go.Bar(name='Equity', x=result_df['year'], y=result_df["Common Stock Equity"])
        ])
        fig.update_layout(barmode='stack')

        st.plotly_chart(fig, theme="streamlit", use_container_width=True)


    with st.expander("Reference Data"):
        df=getTicker(st.session_state.ticker ).balancesheet
        st.dataframe(df.style.highlight_max(axis=1),use_container_width=True)

    with row4_2:
        st.subheader("Equity")
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.balancesheet)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Common Stock Equity",
                    title="Equity over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#42230b"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    # Row #2
    row4_space1, row4_1, row4_space2, row4_2, row4_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

with tab4:
    # Row #1
    row3_space1, row3_1, row3_space2, row3_2, row3_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

    with row3_1:
        st.subheader("Cashflow",help=CASH_FLOW)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.cashflow)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Free Cash Flow",
                    title="Free Cashflow over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#bfdb1f"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    with row3_2:
        st.subheader("Change in Cash",help=CHANGE_IN_CASH)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.cashflow)

        fig = px.bar(
                    result_df,
                    x="year",
                    y="Changes In Cash",
                    title="Change in Cash over the Year",
                    text_auto=True,
                    color_discrete_sequence=["#dbc81f"],
                )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    row4_space1, row4_1, row4_space2, row4_2, row4_space3 = st.columns(
        (0.1, 1, 0.1, 1, 0.1)
    )

    with row4_1:
        st.subheader("Operating,Investing,Financing Cashflows ",help=CASHFLOW_DESC)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.cashflow)

        fig = go.Figure(data=[
            go.Bar(name='Operating', x=result_df['year'], y=result_df["Operating Cash Flow"]),
            go.Bar(name='Investing', x=result_df['year'], y=result_df["Investing Cash Flow"]),
            go.Bar(name='Financing', x=result_df['year'], y=result_df["Financing Cash Flow"])

        ])
        fig.update_layout(barmode='group')

        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    with row4_2:
        st.subheader("Repurchase Of Stock ",help=REPURCHASE_DESC)
        df = getTicker(ticker)
        result_df = formatIncomeStmtData(df.cashflow)

        fig = go.Figure(data=[
            go.Bar(name='Repurchase', x=result_df['year'], y=result_df["Repurchase Of Capital Stock"]),

        ])
        fig.update_layout(barmode='group')

        st.plotly_chart(fig, theme="streamlit", use_container_width=True)

    with st.expander("Reference Data"):
        df=getTicker(st.session_state.ticker ).cashflow
        st.dataframe(df.style.highlight_max(axis=1),use_container_width=True)
